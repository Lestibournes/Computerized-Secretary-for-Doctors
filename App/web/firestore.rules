rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		// match /{document=**} {
		// 	// Only for development purposes:
		// 	allow read, write: if true;
    // }

		function isRoot() {
			return request.auth.uid == get(/databases/$(database)/documents/administration/roles).data.root;
		}

		function isAdministrator() {
			return request.auth.uid in get(/databases/$(database)/documents/administration/roles).data.administrators;
		}

		function verifyFields(required, optional) {
			let allAllowedFields = required.concat(optional);
			
			return
			request.resource.data.keys().hasAll(required) &&
			request.resource.data.keys().hasOnly(allAllowedFields);
		}

		match /users/{userID} {
			// People who should be allowed to edit the data: just the user.
			function isTheUser() {
				return request.auth.uid == userID;
			}

			function isOneOfTheDoctors() {
				return exists(/databases/$(database)/documents/users/$(userID)/private/doctors/$(request.auth.uid));
			}
			
			function isValidData(data) {
				return
				verifyFields(['firstName', 'lastName', 'sex'], ['link', 'doctor', 'secretary', 'fullName', 'image']) &&
				// exists(/databases/$(database)/documents/links/$(data.link)) &&

				// Optional properties:
				data.get("doctor", false) is bool &&
				data.get("secretary", false) is bool &&
				data.get("image", 1) is number &&

				// Automatically maintained by Cloud Functions. Should never be modified or created manually by a user:
				data.get("link", "") == resource.data.get("link", "") &&

				data.firstName is string &&
				data.firstName.size() > 1 &&
				data.firstName.size() < 50 &&

				data.lastName is string &&
				data.lastName.size() > 1 &&
				data.lastName.size() < 50 &&

				data.sex in ["male", "female"] &&

				data.fullName == resource.data.fullName;
			}

			allow read: if true;
			allow create, update: if isTheUser() && isValidData(request.resource.data);

			match /specializations/{specID} {
				// If the user is a doctor.
				// The id is the name of the specialization.
				// This is so that multiple doctors can share the same specialization without being restricted to a central list.
				// Perhaps the properties can include translations? Or should the translations be provided in the specialization collection?
				function isValidData() {
					return
					request.resource.id is string &&
					request.resource.id.size() > 1 &&
					request.resource.id.size() < 50
				}

				allow read;
				allow create, update: if isTheUser() && isValidData();
				allow delete: if isTheUser();
			}
			
			match /private/personal {
				function isValidData() {
					return
					verifyFields(['birthday'], ['siblings']) &&

					request.resource.data.birthday is timestamp &&
					request.resource.data.birthday < request.time &&

					request.resource.data.siblings is int &&
					request.resource.data.siblings >= 0;
				}

				allow read: if isTheUser() || isOneOfTheDoctors();
				allow write: if isTheUser() && isValidData();

				
				match /myDoctors {
					// Stores the collection of all the doctors that the user has appointments with, past and future.
					// I suppose it will need to be maintained by a Cloud Functions effect.
					allow read: if isTheUser()
					allow write: if false; // Since this is automatically maintained by the server.
				}
			}
		}

		match /clinics/{clinicID} {
			function isOwner() {
				return resource.data.owner == request.auth.uid;
			}

			function isSecretary() {
				return exists(/databases/$(database)/documents/clinics/$(clinicID)/secretaries/$(request.auth.uid));
			}

			function isADoctor() {
				return exists(/databases/$(database)/documents/clinics/$(clinicID)/doctors/$(request.auth.uid));
			}

			function isPatient(appointmentID) {
				return
				(exists(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)) &&
				get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)).data.patient == request.auth.uid) ||
				(!exists(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)) &&
				request.resource.data.patient == request.auth.uid)
				
			}

			function isTheDoctor(appointmentID) {
				return get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)).data.doctor == request.auth.uid;
			}

			function isValidData(data) {
				return
				verifyFields(['owner', 'name', 'city', 'address'], ['language', 'link']) &&

				// Automatically maintained by Cloud Functions. Should never be modified or created manually by a user:
				data.get("link", "") == resource.data.get("link", "") &&

				// The name of the clinic must be of a short string:
				data.name is string &&
				data.name.size() >= 1 &&
				data.name.size() <= 50  &&
				
				// The city where the clinic is located must be a short string:
				data.city is string &&
				data.city.size() >= 1 &&
				data.city.size() <= 50  &&
				
				// The city where the clinic is located must be a short string:
				data.address is string &&
				data.address.size() >= 1 &&
				data.address.size() <= 50;
				// The clinic's default language (if it sets one/if such a thing is used):
				// exists(/databases/$(database)/documents/languages/$(request.resource.data.language));
			}

			allow read;
			allow create: if request.resource.data.owner == request.auth.uid && isValidData(request.resource.data);
			allow update: if 
				isOwner() &&
				isValidData(request.resource.data) &&
				// If the owner isn't changed:
				resource.data.owner == request.resource.data.owner;
			allow delete: if isOwner();

			match /secretaries/{secID} {
				function isValidData() {
					return
					verifyFields(['user', 'clinic'], []) &&

					// If the secretary is an existing user and the id of the document matches the linked user:
					secID == request.resource.data.user &&
					exists(/databases/$(database)/documents/users/$(secID)) &&

					// If the linked clinic matches the clinic this secretary works in:
					request.resource.data.clinic == clinicID;
				}

				allow read: if isOwner() || isSecretary() || isADoctor();
				allow write: if isOwner() && isValidData();
			}

			match /doctors/{doctorID} {
				function isValidData() {
					return
					verifyFields(['user', 'clinic', 'minimum'], []) &&

					// The doctor must be an existing user and match the document id:
					request.resource.data.user == doctorID &&
					exists(/databases/$(database)/documents/users/$(doctorID)) &&

					// The clinic must match the clinic this document is in:
					request.resource.data.clinic == clinicID &&

					// The minimum appointment duration in minutes:
					request.resource.data.minimum is int &&
					request.resource.data.minimum > 0
				}

				function isTheDoctor() {
					return
					doctorID == request.auth.uid;
				}

				allow read;
				allow write: if (isOwner() || isTheDoctor()) && isValidData();

				match /types/{typeID} {
					function isValidData() {
						return
						verifyFields(['name', 'duration'], []) &&

						// The text label and identifier of the appointment type (used by applications instead of the id, which is auto-generated(change this?)):
						request.resource.data.name is string &&
						request.resource.data.name.size() > 0 &&

						// The duration of the appointment as a multiple of the minimum:
						request.resource.data.duration is int &&
						request.resource.data.duration > 0
					}

					allow read;
					allow write: if (doctorID == request.auth.uid || isSecretary() || isOwner()) && isValidData();
				}

				match /shifts/{shiftID} {
					function isValidData() {
						return
						verifyFields(['day', 'start', 'end'], []) &&

						// The day of the week as an int:
						request.resource.data.day is int &&
						request.resource.data.day >= 0 &&
						request.resource.data.day <= 6 &&
						
						// Start time:
						request.resource.data.start.size() is timestamp &&
						// request.resource.data.start is map &&

						// request.resource.data.start.hours is int &&
						// request.resource.data.start.hours >= 0 &&
						// request.resource.data.start.hours <= 23 &&
						
						// request.resource.data.start.minutes is int &&
						// request.resource.data.start.minutes >= 0 &&
						// request.resource.data.start.minutes <= 59 &&

						// End time:
						request.resource.data.start.size() is timestamp;
						// request.resource.data.end is map &&

						// request.resource.data.end.hours is int &&
						// request.resource.data.end.hours >= 0 &&
						// request.resource.data.end.hours <= 23 &&

						// request.resource.data.end.minutes is int &&
						// request.resource.data.end.minutes >= 0 &&
						// request.resource.data.end.minutes <= 59
					}

					allow read;
					allow write: if (doctorID == request.auth.uid || isSecretary() || isOwner()) && isValidData();
				}
			}

			match /appointments/{appointmentID} {
			// Store all the appointments only as subcollections of the clinics.
			// This then allows to easily check if the user is a secretary of the clinic.
			// In order to fetch all of a user's or doctor's appointments across all clinics, use collectionGroup:
			// collectionGroup("appointments").where("doctor", "==", doctor)
			// collectionGroup("appointments").where("patient", "==", patient)
			// Secretaries only need to access the appointments of one clinic at a time.
			// To retrieve all appointments of a patient/doctor at one specific a clinic, use:
			// collection("clinics").doc(clinic).collection("appointments").where("doctor", "==", doctor)
			// collection("clinics").doc(clinic).collection("appointments").where("patient", "==", patient)
			// There is still the issue of what to do regarding the doctor's meeting notes.
			// Perhaps the patient should be able to read them, but not write them.

				// Even though writing the data (create, update) is entirely up to Cloud Functions I still want to specify the requirements.
				function isValidData() {
					return
					verifyFields(['patient', 'doctor', 'clinic', 'start', 'end', 'type'], ['valid', 'arrived']) &&

					// The patient is an existing user in the system:
					exists(/databases/$(database)/documents/users/$(request.resource.data.patient)) &&
					// The doctor is registered as a doctor in the system: (Should this just be a field in the user document? Since I'm already checking if the doctor works in the clinic as a doctor, do I need to perform this check at all?)
					exists(/databases/$(database)/documents/doctors/$(request.resource.data.doctor)) &&
					// The patient and doctor are different people:
					// get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(request.resource.data.appointment)).data.doctor !=
					// 	get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(request.resource.data.appointment)).data.patient &&
					// The clinic exists in the system:(is clinic even needed as a field?)
					exists(/databases/$(database)/documents/clinics/$(request.resource.data.clinic)) &&
					// The doctor works for the clinic:
					exists(/databases/$(database)/documents/clinics/$(clinicID)/doctors/$(request.resource.data.doctor)) &&
					// The start time of the appointment is in the future:
					request.resource.data.start is timestamp &&
					request.resource.data.start > request.time &&
					// The end time of the appointment is after the start time:
					request.resource.data.end is timestamp &&
					request.resource.data.end > request.resource.data.start &&
					// The doctor offers the requested appointment type:
					exists(/databases/$(database)/documents/clinics/$(clinicID)/doctors/$(request.resource.data.doctor)/types/$(request.resource.data.type)) &&
					// The duration of the appointment matches the appointment type's duration:
					request.resource.data.end - request.resource.data.start ==
						get(/databases/$(database)/documents/clinics/$(clinicID)/doctors/$(request.resource.data.doctor)/types/$(request.resource.data.type)).data.duration *
						get(/databases/$(database)/documents/clinics/$(clinicID)/doctors/$(request.resource.data.doctor)).data.minimum &&
					
					// The one who updated the arrival status must be either a secretary or the doctor:
					(exists(/databases/$(database)/documents/clinics/$(clinicID)/secretaries/$(request.resource.data.arrived)) ||
					request.resource.data.doctor == request.resource.data.arrived)
				}

				// Only a secretary or the doctor who receives the patient should be allowed to modify the patient's arrival status:
				function arrivalUnchanged() {
					return
					request.resource.data.arrived == resource.data.arrived;
				}

				//Appointments can only be modified if they haven't occured yet, but let's allow to delete appiontments where the patient didn't show up.
				function isArchived() {
					return
					get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)).data.end > request.time;
				}

				allow read: if isPatient(appointmentID) || isTheDoctor(appointmentID) || isSecretary();
				allow write: if
					(isPatient(appointmentID) && arrivalUnchanged() || isTheDoctor(appointmentID) || isSecretary()) &&
					isValidData() &&
					!isArchived();
				allow write: if
					// (
						isPatient(appointmentID)
						&& 
					// arrivalUnchanged() 
					// || 
					// isTheDoctor(appointmentID) 
					// || isSecretary()
					// )
					//  &&
					isValidData()
					//  &&
					// !isArchived()
					;

				match /messages/{messageID} {
					// If I want to enforce correct timestamps on messages
					// (which probably isn't necessary since it's just communication between the doctor and patient)
					// then I can either pass message creation through a Cloud Function or (better yet?)
					// use a Cloud Function effect to add a timestamp to each new message as it comes in.
					// The downside of using an effect is that with live updates the other user will receive the new message before it has a timestamp,
					// but I guess with live listening including the existing messages the timestamp will be loaded a moment later anyway.

					// Turns out that there is a way to validate the time, which looks like this: request.resource.data.timestamp == request.time
					function isSender() {
						return request.resource.data.sender == request.auth.uid;
					}

					function isValidData() {
						return
						verifyFields(['sender', 'text', 'timestamp'], []) &&

						// The sender is either the doctor or patient of this appointment. The receiver is implicitly the other person:
						(request.resource.data.sender == get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)).data.doctor ||
						request.resource.data.sender == get(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(appointmentID)).data.patient) &&
						request.resource.data.text is string &&
						request.resource.data.text.size() > 1 &&
						request.resource.data.text.size() < 2000 &&
						request.resource.data.timestamp == request.time && // Set the timestamp using the server-provided timestamp.
						request.resource.data.document is string;
					}

					allow read: if isPatient(appointmentID) || isTheDoctor(appointmentID);
					allow create: if isSender() && isValidData();
				}
			}

			// Notes that the doctor writes about the meeting.
			// The noteID should be the same as the appointmentID for easy fetching.
			// The notes collection is kept directly beneath the clinic document so that doctors will be able to view all of their own notes using collectionGroup.
			match /notes/{noteID} {
				function isValidData() {
					return
					verifyFields(['appointment', 'text'], []) &&

					// Make sure that the noteID matches the appointmentID:
					exists(/databases/$(database)/documents/clinics/$(clinicID)/appointments/$(noteID)) &&

					request.resource.data.text is string &&
					request.resource.data.text.size() < 10000;
				}

				allow read: if isPatient(noteID) || isTheDoctor(noteID);
				allow write: if isTheDoctor(noteID) && isValidData();
			}
		}

		match /cities/{cityID} {
			// The cityID is the name of the city.
			// This is readable by all but writable by none as it's an automatically maintained index of all the cities that have clinics.
			// Each city document has a collection of clinics that are located in it.
			// Actually this is not needed since it's only useful for search, and search has been scrapped.
			// Perhaps something like this could be used for providing translations of city names?

			// This function isn't used, but I want to specify the requirements anyway:
			function isValidData() {
				return
				verifyFields(['name'], []) &&

				// Make sure that the document will be considered to exist:
				request.resource.data.name == cityID;
			}

			allow read;
			allow write: if false && isValidData();

			match /clinics/{clinicID} {
				// This is an automatically-maintained collection of all the clinics in the city.

				// This function isn't used, but I want to specify the requirements anyway:
				function isValidData() {
					return
					verifyFields(['clinic'], []) &&

					// Make sure that the document will be considered to exist and make it easy to get the clinic id:
					request.resource.data.clinic == clinicID &&

					// Make sure that the clinic exists:
					exists(/databases/$(database)/documents/clinics/$(clinicID));
				}

				allow read;
				allow write: if false && isValidData();
			}
		}

		match /specializations/{specializationID} {
			// This is readable by all but writable by none as it's an automatically maintained index of all the specializations that doctors have.
			// Each specialization document has a collection of doctors that have it.
			// Actually this is not needed since it's only useful for search, and search has been scrapped.
			// Perhaps something like this could be used for providing translations of specialization names?

			// This function isn't used, but I want to specify the requirements anyway:
			function isValidData() {
				return
					verifyFields(['name'], []) &&

					request.resource.data.name is string &&
					request.resource.data.name.size() >= 1 &&
					request.resource.data.name.size() <= 50
			}

			allow read;
			allow write: if false && isValidData();


			match /practitioners/{practitionerID} {
				// This is an automatically-maintained collection of all the doctors who have this specialization.

				// This function isn't used, but I want to specify the requirements anyway:
				function isValidData() {
					return
					verifyFields(['practitioner'], []) &&

					// make the doctor id easy to access and ensure that the document will be considered to exist:
					request.resource.data.practitionerID == practitionerID &&

					// Make sure that the doctor exists:
					exists(/databases/$(database)/documents/users/$(practitionerID)) &&
					get(/databases/$(database)/documents/users/$(practitionerID)).data.doctor == true;
				}

				allow read;
				allow write: if false && isValidData();
			}
		}

		match /languages/{languageID} {
			// Stores the system UI strings for different languages.
			// The default display language should be chosen by user locale data.
			// Users can override the default and manually select their own preffered language.
			// What about translations for the user-provided data, like doctor/user names, clinic names, cities, addresses, specializations, and appointment types?
			// Perhaps each of these objects should have a map for such strings, and the user will be able to provide the translations/translitterations in the supported languages.

			// Each language document should contain:
			// Language name
			// Language code, which can also be used to identify the icon
			// Icon link or other such thing, if I use and external resource for the icon
			// A complete map mapping UI strings in the reference language (English) to their counterparts in this language.
			// I will need a way to mark variables in the translation string so that the variables in the source string can be plugged in.
			function isValidData() {
				return
				// Not sure if strings should be required, and not sure if icon is needed.
				verifyFields(['name', 'code'], ['strings', 'icon']) &&

				request.resource.data.name is string &&
				request.resource.data.name.size() >= 1 &&
				request.resource.data.name.size() <= 20 &&
				request.resource.data.code is string &&
				request.resource.data.code.size() == 2 &&
				request.resource.data.strings is map;
			}

			allow read;
			allow write: if isAdministrator() && isValidData();
		}

		match /administration/roles {
			// This document holds maps of users with different administrative roles in the app.
			// There are basically 2 roles:
			// root, which is a single user that has the highest level of privilege.
			// administrators, which are many, and hold all administrative privileges aside from modifying roles.

			function isValidData() {
				return
				verifyFields(['root', 'administrators'], []) &&

				// The root user must exist:
				exists(/databases/$(database)/documents/users/$(request.resource.data.root)) &&

				// Make sure that the root user is also an administrator:
				request.resource.data.root in request.resource.data.administrators;
			}

			allow read: if isAdministrator() || isRoot();
			allow create, update: if isRoot() && isValidData();
			allow delete: if false; // Explicitly stating that delete should never be allowed.
		}

		match /links/{linkID} {
			// The id of the link is the link string itself.
			// Use a Cloud Functions onWrite listener for maintenance:
			// * When a new link is created, find and delete all the old ones that have the same type and id combination.
			// * Update the clinic/user document with the new link id/name
			
			function isOwner() {
				return
				(request.resource.data.type == "clinic" &&
				get(/databases/$(database)/documents/clinics/$(request.resource.data.id)).data.owner == request.auth.uid)
				||
				(request.resource.data.type == "doctor" &&
				request.resource.data.id == request.auth.uid);
			}

			function isValidData() {
				return
				verifyFields(['type', 'id', 'name'], []) &&

				(
					(
						// Either type is clinic and the clinic exists,
						request.resource.data.type == "clinic" &&
						exists(/databases/$(database)/documents/clinics/$(request.resource.data.id))
					)
						||
					(
						// Or type is doctor and the doctor exists:
						request.resource.data.type == "doctor" &&
						exists(/databases/$(database)/documents/users/$(request.resource.data.id)) &&

						// And the user is a doctor:
						get(/databases/$(database)/documents/users/$(request.resource.data.id)).data.doctor == true
					)
				) &&

				// The id, which is also the link text, must be made of word characters only:
				linkID.matches('^[a-zA-Z0-9_]+$') &&

				// Convenience property for accessing the link text, which must match the id:
				request.resource.data.name == linkID;
			}

			allow read;
			allow write: if isOwner() && isValidData();
		}

		// To enable using a collectionGroup of doctors:
		match /{path=**}/doctors/{doctorID} {
			allow read;
		}

		match /{path=**}/appointments/{appointmentID} {
			function isPatient() {
				return resource.data.patient == request.auth.uid;
			}

			function isTheDoctor() {
				return resource.data.doctor == request.auth.uid;
			}

			function isOwner() {
				let data = get(/databases/$(database)/documents/$(request.resource.data.clinic)/appointments/$(appointmentID));
				return data.owner == request.auth.uid;
			}

			function isSecretary() {
				return exists(/databases/$(database)/documents/$(request.resource.data.clinic)/secretaries/$(request.auth.uid));
			}

			allow read: if isPatient() || isTheDoctor() || isSecretary() || isOwner();
		}
	}
}